#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CheckersProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CheckersDatabase")]
	public partial class CheckersDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertPlayersInGroup(PlayersInGroup instance);
    partial void UpdatePlayersInGroup(PlayersInGroup instance);
    partial void DeletePlayersInGroup(PlayersInGroup instance);
    partial void InsertSidesInGame(SidesInGame instance);
    partial void UpdateSidesInGame(SidesInGame instance);
    partial void DeleteSidesInGame(SidesInGame instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertMovesInGame(MovesInGame instance);
    partial void UpdateMovesInGame(MovesInGame instance);
    partial void DeleteMovesInGame(MovesInGame instance);
    #endregion
		
		public CheckersDataClassesDataContext() : 
				base(global::CheckersProject.Properties.Settings.Default.CheckersDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CheckersDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CheckersDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CheckersDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CheckersDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<PlayersInGroup> PlayersInGroups
		{
			get
			{
				return this.GetTable<PlayersInGroup>();
			}
		}
		
		public System.Data.Linq.Table<SidesInGame> SidesInGames
		{
			get
			{
				return this.GetTable<SidesInGame>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<MovesInGame> MovesInGames
		{
			get
			{
				return this.GetTable<MovesInGame>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _group_ID;
		
		private string _group_Name;
		
		private EntitySet<PlayersInGroup> _PlayersInGroups;
		
		private EntitySet<SidesInGame> _SidesInGames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ongroup_IDChanging(int value);
    partial void Ongroup_IDChanged();
    partial void Ongroup_NameChanging(string value);
    partial void Ongroup_NameChanged();
    #endregion
		
		public Group()
		{
			this._PlayersInGroups = new EntitySet<PlayersInGroup>(new Action<PlayersInGroup>(this.attach_PlayersInGroups), new Action<PlayersInGroup>(this.detach_PlayersInGroups));
			this._SidesInGames = new EntitySet<SidesInGame>(new Action<SidesInGame>(this.attach_SidesInGames), new Action<SidesInGame>(this.detach_SidesInGames));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int group_ID
		{
			get
			{
				return this._group_ID;
			}
			set
			{
				if ((this._group_ID != value))
				{
					this.Ongroup_IDChanging(value);
					this.SendPropertyChanging();
					this._group_ID = value;
					this.SendPropertyChanged("group_ID");
					this.Ongroup_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string group_Name
		{
			get
			{
				return this._group_Name;
			}
			set
			{
				if ((this._group_Name != value))
				{
					this.Ongroup_NameChanging(value);
					this.SendPropertyChanging();
					this._group_Name = value;
					this.SendPropertyChanged("group_Name");
					this.Ongroup_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_PlayersInGroup", Storage="_PlayersInGroups", ThisKey="group_ID", OtherKey="playerInGroup_GroupID")]
		public EntitySet<PlayersInGroup> PlayersInGroups
		{
			get
			{
				return this._PlayersInGroups;
			}
			set
			{
				this._PlayersInGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_SidesInGame", Storage="_SidesInGames", ThisKey="group_ID", OtherKey="side_GroupId")]
		public EntitySet<SidesInGame> SidesInGames
		{
			get
			{
				return this._SidesInGames;
			}
			set
			{
				this._SidesInGames.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayersInGroups(PlayersInGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_PlayersInGroups(PlayersInGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_SidesInGames(SidesInGame entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_SidesInGames(SidesInGame entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayersInGroup")]
	public partial class PlayersInGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _playerInGroup_GroupID;
		
		private int _playerInGroup_PlayerID;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnplayerInGroup_GroupIDChanging(int value);
    partial void OnplayerInGroup_GroupIDChanged();
    partial void OnplayerInGroup_PlayerIDChanging(int value);
    partial void OnplayerInGroup_PlayerIDChanged();
    #endregion
		
		public PlayersInGroup()
		{
			this._Group = default(EntityRef<Group>);
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerInGroup_GroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int playerInGroup_GroupID
		{
			get
			{
				return this._playerInGroup_GroupID;
			}
			set
			{
				if ((this._playerInGroup_GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnplayerInGroup_GroupIDChanging(value);
					this.SendPropertyChanging();
					this._playerInGroup_GroupID = value;
					this.SendPropertyChanged("playerInGroup_GroupID");
					this.OnplayerInGroup_GroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerInGroup_PlayerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int playerInGroup_PlayerID
		{
			get
			{
				return this._playerInGroup_PlayerID;
			}
			set
			{
				if ((this._playerInGroup_PlayerID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnplayerInGroup_PlayerIDChanging(value);
					this.SendPropertyChanging();
					this._playerInGroup_PlayerID = value;
					this.SendPropertyChanged("playerInGroup_PlayerID");
					this.OnplayerInGroup_PlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_PlayersInGroup", Storage="_Group", ThisKey="playerInGroup_GroupID", OtherKey="group_ID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.PlayersInGroups.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.PlayersInGroups.Add(this);
						this._playerInGroup_GroupID = value.group_ID;
					}
					else
					{
						this._playerInGroup_GroupID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayersInGroup", Storage="_Player", ThisKey="playerInGroup_PlayerID", OtherKey="player_ID", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.PlayersInGroups.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.PlayersInGroups.Add(this);
						this._playerInGroup_PlayerID = value.player_ID;
					}
					else
					{
						this._playerInGroup_PlayerID = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SidesInGame")]
	public partial class SidesInGame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _side_GameID;
		
		private int _side_GroupId;
		
		private int _side_PlayerId;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onside_GameIDChanging(int value);
    partial void Onside_GameIDChanged();
    partial void Onside_GroupIdChanging(int value);
    partial void Onside_GroupIdChanged();
    partial void Onside_PlayerIdChanging(int value);
    partial void Onside_PlayerIdChanged();
    #endregion
		
		public SidesInGame()
		{
			this._Group = default(EntityRef<Group>);
			this._Player = default(EntityRef<Player>);
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_side_GameID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int side_GameID
		{
			get
			{
				return this._side_GameID;
			}
			set
			{
				if ((this._side_GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onside_GameIDChanging(value);
					this.SendPropertyChanging();
					this._side_GameID = value;
					this.SendPropertyChanged("side_GameID");
					this.Onside_GameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_side_GroupId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int side_GroupId
		{
			get
			{
				return this._side_GroupId;
			}
			set
			{
				if ((this._side_GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onside_GroupIdChanging(value);
					this.SendPropertyChanging();
					this._side_GroupId = value;
					this.SendPropertyChanged("side_GroupId");
					this.Onside_GroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_side_PlayerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int side_PlayerId
		{
			get
			{
				return this._side_PlayerId;
			}
			set
			{
				if ((this._side_PlayerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onside_PlayerIdChanging(value);
					this.SendPropertyChanging();
					this._side_PlayerId = value;
					this.SendPropertyChanged("side_PlayerId");
					this.Onside_PlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_SidesInGame", Storage="_Group", ThisKey="side_GroupId", OtherKey="group_ID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.SidesInGames.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.SidesInGames.Add(this);
						this._side_GroupId = value.group_ID;
					}
					else
					{
						this._side_GroupId = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_SidesInGame", Storage="_Player", ThisKey="side_PlayerId", OtherKey="player_ID", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.SidesInGames.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.SidesInGames.Add(this);
						this._side_PlayerId = value.player_ID;
					}
					else
					{
						this._side_PlayerId = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_SidesInGame", Storage="_Game", ThisKey="side_GameID", OtherKey="game_ID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.SidesInGames.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.SidesInGames.Add(this);
						this._side_GameID = value.game_ID;
					}
					else
					{
						this._side_GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _player_ID;
		
		private string _player_FirstName;
		
		private string _player_LastName;
		
		private string _player_CellNumber;
		
		private string _player_City;
		
		private string _player_Street;
		
		private System.Nullable<int> _player_HouseNumber;
		
		private System.Nullable<System.DateTime> _player_Reg_Date;
		
		private string _player_Email;
		
		private System.Nullable<int> _player_Wins;
		
		private EntitySet<PlayersInGroup> _PlayersInGroups;
		
		private EntitySet<SidesInGame> _SidesInGames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onplayer_IDChanging(int value);
    partial void Onplayer_IDChanged();
    partial void Onplayer_FirstNameChanging(string value);
    partial void Onplayer_FirstNameChanged();
    partial void Onplayer_LastNameChanging(string value);
    partial void Onplayer_LastNameChanged();
    partial void Onplayer_CellNumberChanging(string value);
    partial void Onplayer_CellNumberChanged();
    partial void Onplayer_CityChanging(string value);
    partial void Onplayer_CityChanged();
    partial void Onplayer_StreetChanging(string value);
    partial void Onplayer_StreetChanged();
    partial void Onplayer_HouseNumberChanging(System.Nullable<int> value);
    partial void Onplayer_HouseNumberChanged();
    partial void Onplayer_Reg_DateChanging(System.Nullable<System.DateTime> value);
    partial void Onplayer_Reg_DateChanged();
    partial void Onplayer_EmailChanging(string value);
    partial void Onplayer_EmailChanged();
    partial void Onplayer_WinsChanging(System.Nullable<int> value);
    partial void Onplayer_WinsChanged();
    #endregion
		
		public Player()
		{
			this._PlayersInGroups = new EntitySet<PlayersInGroup>(new Action<PlayersInGroup>(this.attach_PlayersInGroups), new Action<PlayersInGroup>(this.detach_PlayersInGroups));
			this._SidesInGames = new EntitySet<SidesInGame>(new Action<SidesInGame>(this.attach_SidesInGames), new Action<SidesInGame>(this.detach_SidesInGames));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int player_ID
		{
			get
			{
				return this._player_ID;
			}
			set
			{
				if ((this._player_ID != value))
				{
					this.Onplayer_IDChanging(value);
					this.SendPropertyChanging();
					this._player_ID = value;
					this.SendPropertyChanged("player_ID");
					this.Onplayer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string player_FirstName
		{
			get
			{
				return this._player_FirstName;
			}
			set
			{
				if ((this._player_FirstName != value))
				{
					this.Onplayer_FirstNameChanging(value);
					this.SendPropertyChanging();
					this._player_FirstName = value;
					this.SendPropertyChanged("player_FirstName");
					this.Onplayer_FirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string player_LastName
		{
			get
			{
				return this._player_LastName;
			}
			set
			{
				if ((this._player_LastName != value))
				{
					this.Onplayer_LastNameChanging(value);
					this.SendPropertyChanging();
					this._player_LastName = value;
					this.SendPropertyChanged("player_LastName");
					this.Onplayer_LastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_CellNumber", DbType="VarChar(50)")]
		public string player_CellNumber
		{
			get
			{
				return this._player_CellNumber;
			}
			set
			{
				if ((this._player_CellNumber != value))
				{
					this.Onplayer_CellNumberChanging(value);
					this.SendPropertyChanging();
					this._player_CellNumber = value;
					this.SendPropertyChanged("player_CellNumber");
					this.Onplayer_CellNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_City", DbType="VarChar(50)")]
		public string player_City
		{
			get
			{
				return this._player_City;
			}
			set
			{
				if ((this._player_City != value))
				{
					this.Onplayer_CityChanging(value);
					this.SendPropertyChanging();
					this._player_City = value;
					this.SendPropertyChanged("player_City");
					this.Onplayer_CityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_Street", DbType="VarChar(50)")]
		public string player_Street
		{
			get
			{
				return this._player_Street;
			}
			set
			{
				if ((this._player_Street != value))
				{
					this.Onplayer_StreetChanging(value);
					this.SendPropertyChanging();
					this._player_Street = value;
					this.SendPropertyChanged("player_Street");
					this.Onplayer_StreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_HouseNumber", DbType="Int")]
		public System.Nullable<int> player_HouseNumber
		{
			get
			{
				return this._player_HouseNumber;
			}
			set
			{
				if ((this._player_HouseNumber != value))
				{
					this.Onplayer_HouseNumberChanging(value);
					this.SendPropertyChanging();
					this._player_HouseNumber = value;
					this.SendPropertyChanged("player_HouseNumber");
					this.Onplayer_HouseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_Reg_Date", DbType="Date")]
		public System.Nullable<System.DateTime> player_Reg_Date
		{
			get
			{
				return this._player_Reg_Date;
			}
			set
			{
				if ((this._player_Reg_Date != value))
				{
					this.Onplayer_Reg_DateChanging(value);
					this.SendPropertyChanging();
					this._player_Reg_Date = value;
					this.SendPropertyChanged("player_Reg_Date");
					this.Onplayer_Reg_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_Email", DbType="VarChar(50)")]
		public string player_Email
		{
			get
			{
				return this._player_Email;
			}
			set
			{
				if ((this._player_Email != value))
				{
					this.Onplayer_EmailChanging(value);
					this.SendPropertyChanging();
					this._player_Email = value;
					this.SendPropertyChanged("player_Email");
					this.Onplayer_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_Wins", DbType="Int")]
		public System.Nullable<int> player_Wins
		{
			get
			{
				return this._player_Wins;
			}
			set
			{
				if ((this._player_Wins != value))
				{
					this.Onplayer_WinsChanging(value);
					this.SendPropertyChanging();
					this._player_Wins = value;
					this.SendPropertyChanged("player_Wins");
					this.Onplayer_WinsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayersInGroup", Storage="_PlayersInGroups", ThisKey="player_ID", OtherKey="playerInGroup_PlayerID")]
		public EntitySet<PlayersInGroup> PlayersInGroups
		{
			get
			{
				return this._PlayersInGroups;
			}
			set
			{
				this._PlayersInGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_SidesInGame", Storage="_SidesInGames", ThisKey="player_ID", OtherKey="side_PlayerId")]
		public EntitySet<SidesInGame> SidesInGames
		{
			get
			{
				return this._SidesInGames;
			}
			set
			{
				this._SidesInGames.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayersInGroups(PlayersInGroup entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_PlayersInGroups(PlayersInGroup entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_SidesInGames(SidesInGame entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_SidesInGames(SidesInGame entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Games")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _game_ID;
		
		private int _game_BoardSize;
		
		private System.DateTime _game_Date;
		
		private bool _game_IsSinglePlayer;
		
		private System.Nullable<bool> _game_IsSmartComputer;
		
		private EntitySet<SidesInGame> _SidesInGames;
		
		private EntitySet<MovesInGame> _MovesInGames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ongame_IDChanging(int value);
    partial void Ongame_IDChanged();
    partial void Ongame_BoardSizeChanging(int value);
    partial void Ongame_BoardSizeChanged();
    partial void Ongame_DateChanging(System.DateTime value);
    partial void Ongame_DateChanged();
    partial void Ongame_IsSinglePlayerChanging(bool value);
    partial void Ongame_IsSinglePlayerChanged();
    partial void Ongame_IsSmartComputerChanging(System.Nullable<bool> value);
    partial void Ongame_IsSmartComputerChanged();
    #endregion
		
		public Game()
		{
			this._SidesInGames = new EntitySet<SidesInGame>(new Action<SidesInGame>(this.attach_SidesInGames), new Action<SidesInGame>(this.detach_SidesInGames));
			this._MovesInGames = new EntitySet<MovesInGame>(new Action<MovesInGame>(this.attach_MovesInGames), new Action<MovesInGame>(this.detach_MovesInGames));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_game_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int game_ID
		{
			get
			{
				return this._game_ID;
			}
			set
			{
				if ((this._game_ID != value))
				{
					this.Ongame_IDChanging(value);
					this.SendPropertyChanging();
					this._game_ID = value;
					this.SendPropertyChanged("game_ID");
					this.Ongame_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_game_BoardSize", DbType="Int NOT NULL")]
		public int game_BoardSize
		{
			get
			{
				return this._game_BoardSize;
			}
			set
			{
				if ((this._game_BoardSize != value))
				{
					this.Ongame_BoardSizeChanging(value);
					this.SendPropertyChanging();
					this._game_BoardSize = value;
					this.SendPropertyChanged("game_BoardSize");
					this.Ongame_BoardSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_game_Date", DbType="Date NOT NULL")]
		public System.DateTime game_Date
		{
			get
			{
				return this._game_Date;
			}
			set
			{
				if ((this._game_Date != value))
				{
					this.Ongame_DateChanging(value);
					this.SendPropertyChanging();
					this._game_Date = value;
					this.SendPropertyChanged("game_Date");
					this.Ongame_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_game_IsSinglePlayer", DbType="Bit NOT NULL")]
		public bool game_IsSinglePlayer
		{
			get
			{
				return this._game_IsSinglePlayer;
			}
			set
			{
				if ((this._game_IsSinglePlayer != value))
				{
					this.Ongame_IsSinglePlayerChanging(value);
					this.SendPropertyChanging();
					this._game_IsSinglePlayer = value;
					this.SendPropertyChanged("game_IsSinglePlayer");
					this.Ongame_IsSinglePlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_game_IsSmartComputer", DbType="Bit")]
		public System.Nullable<bool> game_IsSmartComputer
		{
			get
			{
				return this._game_IsSmartComputer;
			}
			set
			{
				if ((this._game_IsSmartComputer != value))
				{
					this.Ongame_IsSmartComputerChanging(value);
					this.SendPropertyChanging();
					this._game_IsSmartComputer = value;
					this.SendPropertyChanged("game_IsSmartComputer");
					this.Ongame_IsSmartComputerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_SidesInGame", Storage="_SidesInGames", ThisKey="game_ID", OtherKey="side_GameID")]
		public EntitySet<SidesInGame> SidesInGames
		{
			get
			{
				return this._SidesInGames;
			}
			set
			{
				this._SidesInGames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_MovesInGame", Storage="_MovesInGames", ThisKey="game_ID", OtherKey="move_GameID")]
		public EntitySet<MovesInGame> MovesInGames
		{
			get
			{
				return this._MovesInGames;
			}
			set
			{
				this._MovesInGames.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SidesInGames(SidesInGame entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_SidesInGames(SidesInGame entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_MovesInGames(MovesInGame entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_MovesInGames(MovesInGame entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MovesInGame")]
	public partial class MovesInGame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _move_ID;
		
		private int _move_GameID;
		
		private int _move_SideID;
		
		private int _move_Origin_I;
		
		private int _move_Origin_J;
		
		private int _move_Target_I;
		
		private int _move_Target_J;
		
		private System.Nullable<int> _move_Eaten_I;
		
		private System.Nullable<int> _move_Eaten_J;
		
		private bool _move_IsFaded;
		
		private bool _move_IsDragMode;
		
		private string _move_P1_PawnShape;
		
		private bool _move_P1_IsShapeFilled;
		
		private int _move_P1_PawnColor_R;
		
		private int _move_P1_PawnColor_G;
		
		private int _move_P1_PawnColor_B;
		
		private string _move_P2_PawnShape;
		
		private bool _move_P2_IsShapeFilled;
		
		private int _move_P2_PawnColor_R;
		
		private int _move_P2_PawnColor_G;
		
		private int _move_P2_PawnColor_B;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onmove_IDChanging(int value);
    partial void Onmove_IDChanged();
    partial void Onmove_GameIDChanging(int value);
    partial void Onmove_GameIDChanged();
    partial void Onmove_SideIDChanging(int value);
    partial void Onmove_SideIDChanged();
    partial void Onmove_Origin_IChanging(int value);
    partial void Onmove_Origin_IChanged();
    partial void Onmove_Origin_JChanging(int value);
    partial void Onmove_Origin_JChanged();
    partial void Onmove_Target_IChanging(int value);
    partial void Onmove_Target_IChanged();
    partial void Onmove_Target_JChanging(int value);
    partial void Onmove_Target_JChanged();
    partial void Onmove_Eaten_IChanging(System.Nullable<int> value);
    partial void Onmove_Eaten_IChanged();
    partial void Onmove_Eaten_JChanging(System.Nullable<int> value);
    partial void Onmove_Eaten_JChanged();
    partial void Onmove_IsFadedChanging(bool value);
    partial void Onmove_IsFadedChanged();
    partial void Onmove_IsDragModeChanging(bool value);
    partial void Onmove_IsDragModeChanged();
    partial void Onmove_P1_PawnShapeChanging(string value);
    partial void Onmove_P1_PawnShapeChanged();
    partial void Onmove_P1_IsShapeFilledChanging(bool value);
    partial void Onmove_P1_IsShapeFilledChanged();
    partial void Onmove_P1_PawnColor_RChanging(int value);
    partial void Onmove_P1_PawnColor_RChanged();
    partial void Onmove_P1_PawnColor_GChanging(int value);
    partial void Onmove_P1_PawnColor_GChanged();
    partial void Onmove_P1_PawnColor_BChanging(int value);
    partial void Onmove_P1_PawnColor_BChanged();
    partial void Onmove_P2_PawnShapeChanging(string value);
    partial void Onmove_P2_PawnShapeChanged();
    partial void Onmove_P2_IsShapeFilledChanging(bool value);
    partial void Onmove_P2_IsShapeFilledChanged();
    partial void Onmove_P2_PawnColor_RChanging(int value);
    partial void Onmove_P2_PawnColor_RChanged();
    partial void Onmove_P2_PawnColor_GChanging(int value);
    partial void Onmove_P2_PawnColor_GChanged();
    partial void Onmove_P2_PawnColor_BChanging(int value);
    partial void Onmove_P2_PawnColor_BChanged();
    #endregion
		
		public MovesInGame()
		{
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int move_ID
		{
			get
			{
				return this._move_ID;
			}
			set
			{
				if ((this._move_ID != value))
				{
					this.Onmove_IDChanging(value);
					this.SendPropertyChanging();
					this._move_ID = value;
					this.SendPropertyChanged("move_ID");
					this.Onmove_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_GameID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int move_GameID
		{
			get
			{
				return this._move_GameID;
			}
			set
			{
				if ((this._move_GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmove_GameIDChanging(value);
					this.SendPropertyChanging();
					this._move_GameID = value;
					this.SendPropertyChanged("move_GameID");
					this.Onmove_GameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_SideID", DbType="Int NOT NULL")]
		public int move_SideID
		{
			get
			{
				return this._move_SideID;
			}
			set
			{
				if ((this._move_SideID != value))
				{
					this.Onmove_SideIDChanging(value);
					this.SendPropertyChanging();
					this._move_SideID = value;
					this.SendPropertyChanged("move_SideID");
					this.Onmove_SideIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_Origin_I", DbType="Int NOT NULL")]
		public int move_Origin_I
		{
			get
			{
				return this._move_Origin_I;
			}
			set
			{
				if ((this._move_Origin_I != value))
				{
					this.Onmove_Origin_IChanging(value);
					this.SendPropertyChanging();
					this._move_Origin_I = value;
					this.SendPropertyChanged("move_Origin_I");
					this.Onmove_Origin_IChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_Origin_J", DbType="Int NOT NULL")]
		public int move_Origin_J
		{
			get
			{
				return this._move_Origin_J;
			}
			set
			{
				if ((this._move_Origin_J != value))
				{
					this.Onmove_Origin_JChanging(value);
					this.SendPropertyChanging();
					this._move_Origin_J = value;
					this.SendPropertyChanged("move_Origin_J");
					this.Onmove_Origin_JChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_Target_I", DbType="Int NOT NULL")]
		public int move_Target_I
		{
			get
			{
				return this._move_Target_I;
			}
			set
			{
				if ((this._move_Target_I != value))
				{
					this.Onmove_Target_IChanging(value);
					this.SendPropertyChanging();
					this._move_Target_I = value;
					this.SendPropertyChanged("move_Target_I");
					this.Onmove_Target_IChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_Target_J", DbType="Int NOT NULL")]
		public int move_Target_J
		{
			get
			{
				return this._move_Target_J;
			}
			set
			{
				if ((this._move_Target_J != value))
				{
					this.Onmove_Target_JChanging(value);
					this.SendPropertyChanging();
					this._move_Target_J = value;
					this.SendPropertyChanged("move_Target_J");
					this.Onmove_Target_JChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_Eaten_I", DbType="Int")]
		public System.Nullable<int> move_Eaten_I
		{
			get
			{
				return this._move_Eaten_I;
			}
			set
			{
				if ((this._move_Eaten_I != value))
				{
					this.Onmove_Eaten_IChanging(value);
					this.SendPropertyChanging();
					this._move_Eaten_I = value;
					this.SendPropertyChanged("move_Eaten_I");
					this.Onmove_Eaten_IChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_Eaten_J", DbType="Int")]
		public System.Nullable<int> move_Eaten_J
		{
			get
			{
				return this._move_Eaten_J;
			}
			set
			{
				if ((this._move_Eaten_J != value))
				{
					this.Onmove_Eaten_JChanging(value);
					this.SendPropertyChanging();
					this._move_Eaten_J = value;
					this.SendPropertyChanged("move_Eaten_J");
					this.Onmove_Eaten_JChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_IsFaded", DbType="Bit NOT NULL")]
		public bool move_IsFaded
		{
			get
			{
				return this._move_IsFaded;
			}
			set
			{
				if ((this._move_IsFaded != value))
				{
					this.Onmove_IsFadedChanging(value);
					this.SendPropertyChanging();
					this._move_IsFaded = value;
					this.SendPropertyChanged("move_IsFaded");
					this.Onmove_IsFadedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_IsDragMode", DbType="Bit NOT NULL")]
		public bool move_IsDragMode
		{
			get
			{
				return this._move_IsDragMode;
			}
			set
			{
				if ((this._move_IsDragMode != value))
				{
					this.Onmove_IsDragModeChanging(value);
					this.SendPropertyChanging();
					this._move_IsDragMode = value;
					this.SendPropertyChanged("move_IsDragMode");
					this.Onmove_IsDragModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_P1_PawnShape", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string move_P1_PawnShape
		{
			get
			{
				return this._move_P1_PawnShape;
			}
			set
			{
				if ((this._move_P1_PawnShape != value))
				{
					this.Onmove_P1_PawnShapeChanging(value);
					this.SendPropertyChanging();
					this._move_P1_PawnShape = value;
					this.SendPropertyChanged("move_P1_PawnShape");
					this.Onmove_P1_PawnShapeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_P1_IsShapeFilled", DbType="Bit NOT NULL")]
		public bool move_P1_IsShapeFilled
		{
			get
			{
				return this._move_P1_IsShapeFilled;
			}
			set
			{
				if ((this._move_P1_IsShapeFilled != value))
				{
					this.Onmove_P1_IsShapeFilledChanging(value);
					this.SendPropertyChanging();
					this._move_P1_IsShapeFilled = value;
					this.SendPropertyChanged("move_P1_IsShapeFilled");
					this.Onmove_P1_IsShapeFilledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_P1_PawnColor_R", DbType="Int NOT NULL")]
		public int move_P1_PawnColor_R
		{
			get
			{
				return this._move_P1_PawnColor_R;
			}
			set
			{
				if ((this._move_P1_PawnColor_R != value))
				{
					this.Onmove_P1_PawnColor_RChanging(value);
					this.SendPropertyChanging();
					this._move_P1_PawnColor_R = value;
					this.SendPropertyChanged("move_P1_PawnColor_R");
					this.Onmove_P1_PawnColor_RChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_P1_PawnColor_G", DbType="Int NOT NULL")]
		public int move_P1_PawnColor_G
		{
			get
			{
				return this._move_P1_PawnColor_G;
			}
			set
			{
				if ((this._move_P1_PawnColor_G != value))
				{
					this.Onmove_P1_PawnColor_GChanging(value);
					this.SendPropertyChanging();
					this._move_P1_PawnColor_G = value;
					this.SendPropertyChanged("move_P1_PawnColor_G");
					this.Onmove_P1_PawnColor_GChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_P1_PawnColor_B", DbType="Int NOT NULL")]
		public int move_P1_PawnColor_B
		{
			get
			{
				return this._move_P1_PawnColor_B;
			}
			set
			{
				if ((this._move_P1_PawnColor_B != value))
				{
					this.Onmove_P1_PawnColor_BChanging(value);
					this.SendPropertyChanging();
					this._move_P1_PawnColor_B = value;
					this.SendPropertyChanged("move_P1_PawnColor_B");
					this.Onmove_P1_PawnColor_BChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_P2_PawnShape", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string move_P2_PawnShape
		{
			get
			{
				return this._move_P2_PawnShape;
			}
			set
			{
				if ((this._move_P2_PawnShape != value))
				{
					this.Onmove_P2_PawnShapeChanging(value);
					this.SendPropertyChanging();
					this._move_P2_PawnShape = value;
					this.SendPropertyChanged("move_P2_PawnShape");
					this.Onmove_P2_PawnShapeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_P2_IsShapeFilled", DbType="Bit NOT NULL")]
		public bool move_P2_IsShapeFilled
		{
			get
			{
				return this._move_P2_IsShapeFilled;
			}
			set
			{
				if ((this._move_P2_IsShapeFilled != value))
				{
					this.Onmove_P2_IsShapeFilledChanging(value);
					this.SendPropertyChanging();
					this._move_P2_IsShapeFilled = value;
					this.SendPropertyChanged("move_P2_IsShapeFilled");
					this.Onmove_P2_IsShapeFilledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_P2_PawnColor_R", DbType="Int NOT NULL")]
		public int move_P2_PawnColor_R
		{
			get
			{
				return this._move_P2_PawnColor_R;
			}
			set
			{
				if ((this._move_P2_PawnColor_R != value))
				{
					this.Onmove_P2_PawnColor_RChanging(value);
					this.SendPropertyChanging();
					this._move_P2_PawnColor_R = value;
					this.SendPropertyChanged("move_P2_PawnColor_R");
					this.Onmove_P2_PawnColor_RChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_P2_PawnColor_G", DbType="Int NOT NULL")]
		public int move_P2_PawnColor_G
		{
			get
			{
				return this._move_P2_PawnColor_G;
			}
			set
			{
				if ((this._move_P2_PawnColor_G != value))
				{
					this.Onmove_P2_PawnColor_GChanging(value);
					this.SendPropertyChanging();
					this._move_P2_PawnColor_G = value;
					this.SendPropertyChanged("move_P2_PawnColor_G");
					this.Onmove_P2_PawnColor_GChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_move_P2_PawnColor_B", DbType="Int NOT NULL")]
		public int move_P2_PawnColor_B
		{
			get
			{
				return this._move_P2_PawnColor_B;
			}
			set
			{
				if ((this._move_P2_PawnColor_B != value))
				{
					this.Onmove_P2_PawnColor_BChanging(value);
					this.SendPropertyChanging();
					this._move_P2_PawnColor_B = value;
					this.SendPropertyChanged("move_P2_PawnColor_B");
					this.Onmove_P2_PawnColor_BChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_MovesInGame", Storage="_Game", ThisKey="move_GameID", OtherKey="game_ID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.MovesInGames.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.MovesInGames.Add(this);
						this._move_GameID = value.game_ID;
					}
					else
					{
						this._move_GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
